{
  "version": 3,
  "sources": ["../../../../src/services/oauth.service.ts"],
  "sourcesContent": ["import passport from 'passport'\r\nimport { env } from '@/config/environment.config'\r\nimport { databaseService } from '@/services/database.service'\r\nimport User from '@/models/schemas/Users.schema'\r\nimport userServices from '@/services/users.service'\r\nimport RefreshToken from '@/models/schemas/RefreshToken.schema'\r\nimport { Request, Response } from 'express'\r\nimport { AuthProvider } from '@/@types/auth.type'\r\nimport { Strategy as GoogleStrategy } from 'passport-google-oauth20'\r\nimport { ObjectId } from 'mongodb'\r\n\r\nclass AuthService {\r\n  init() {\r\n    passport.use(\r\n      new GoogleStrategy(\r\n        {\r\n          clientID: env.auth.google.client_id,\r\n          clientSecret: env.auth.google.client_secret,\r\n          callbackURL: env.auth.google.callback_url,\r\n          passReqToCallback: true\r\n        },\r\n        async function (req, accessToken, refreshToken, profile, done) {\r\n          try {\r\n            let user = await databaseService.users.findOne<User>({ provider: 'google', providerId: profile.id })\r\n            if (!user) {\r\n              const newUser = new User({\r\n                avatar: profile._json.picture,\r\n                //@ts-ignore\r\n                email: profile.email,\r\n                username: profile.displayName,\r\n                provider: 'google',\r\n                providerId: profile.id\r\n              })\r\n              user = newUser\r\n              await databaseService.users.insertOne(newUser)\r\n              req.user = { ...newUser, _id: newUser._id.toString() }\r\n              return done(null, newUser)\r\n            }\r\n\r\n            const avatar = profile._json.picture\r\n\r\n            user = { ...user, avatar }\r\n\r\n            await databaseService.users.updateOne(\r\n              { _id: user._id },\r\n              {\r\n                $set: user\r\n              }\r\n            )\r\n            req.user = { ...user, _id: user._id.toString() }\r\n            return done(null, user)\r\n          } catch (error) {\r\n            return done(error, null)\r\n          }\r\n        }\r\n      )\r\n    )\r\n  }\r\n  async callback(provider: AuthProvider, req: Request, res: Response) {\r\n    const { _id, role, email } = req.user\r\n    const refresh_token = await userServices.signRefreshToken(_id.toString(), email, role)\r\n    // if user is logged in but still login again\r\n    await databaseService.refreshTokens.deleteOne({ user_id: new ObjectId(_id) })\r\n    await databaseService.refreshTokens.insertOne(\r\n      new RefreshToken({\r\n        token: refresh_token,\r\n        user_id: new ObjectId(_id)\r\n      })\r\n    )\r\n\r\n    res.redirect(`${env.url.auth_success}?provider=${provider}&refresh_token=${refresh_token}`)\r\n  }\r\n}\r\n\r\nconst authService = new AuthService()\r\nauthService.init()\r\nexport default authService\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAqB;AACrB,yBAAoB;AACpB,sBAAgC;AAChC,mBAAiB;AACjB,mBAAyB;AACzB,0BAAyB;AAGzB,qCAA2C;AAC3C,qBAAyB;AAEzB,MAAM,YAAY;AAAA,EAChB,OAAO;AACL,oBAAAA,QAAS;AAAA,MACP,IAAI,+BAAAC;AAAA,QACF;AAAA,UACE,UAAU,uBAAI,KAAK,OAAO;AAAA,UAC1B,cAAc,uBAAI,KAAK,OAAO;AAAA,UAC9B,aAAa,uBAAI,KAAK,OAAO;AAAA,UAC7B,mBAAmB;AAAA,QACrB;AAAA,QACA,eAAgB,KAAK,aAAa,cAAc,SAAS,MAAM;AAC7D,cAAI;AACF,gBAAI,OAAO,MAAM,gCAAgB,MAAM,QAAc,EAAE,UAAU,UAAU,YAAY,QAAQ,GAAG,CAAC;AACnG,gBAAI,CAAC,MAAM;AACT,oBAAM,UAAU,IAAI,aAAAC,QAAK;AAAA,gBACvB,QAAQ,QAAQ,MAAM;AAAA;AAAA,gBAEtB,OAAO,QAAQ;AAAA,gBACf,UAAU,QAAQ;AAAA,gBAClB,UAAU;AAAA,gBACV,YAAY,QAAQ;AAAA,cACtB,CAAC;AACD,qBAAO;AACP,oBAAM,gCAAgB,MAAM,UAAU,OAAO;AAC7C,kBAAI,OAAO,EAAE,GAAG,SAAS,KAAK,QAAQ,IAAI,SAAS,EAAE;AACrD,qBAAO,KAAK,MAAM,OAAO;AAAA,YAC3B;AAEA,kBAAM,SAAS,QAAQ,MAAM;AAE7B,mBAAO,EAAE,GAAG,MAAM,OAAO;AAEzB,kBAAM,gCAAgB,MAAM;AAAA,cAC1B,EAAE,KAAK,KAAK,IAAI;AAAA,cAChB;AAAA,gBACE,MAAM;AAAA,cACR;AAAA,YACF;AACA,gBAAI,OAAO,EAAE,GAAG,MAAM,KAAK,KAAK,IAAI,SAAS,EAAE;AAC/C,mBAAO,KAAK,MAAM,IAAI;AAAA,UACxB,SAAS,OAAP;AACA,mBAAO,KAAK,OAAO,IAAI;AAAA,UACzB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,MAAM,SAAS,UAAwB,KAAc,KAAe;AAClE,UAAM,EAAE,KAAK,MAAM,MAAM,IAAI,IAAI;AACjC,UAAM,gBAAgB,MAAM,aAAAC,QAAa,iBAAiB,IAAI,SAAS,GAAG,OAAO,IAAI;AAErF,UAAM,gCAAgB,cAAc,UAAU,EAAE,SAAS,IAAI,wBAAS,GAAG,EAAE,CAAC;AAC5E,UAAM,gCAAgB,cAAc;AAAA,MAClC,IAAI,oBAAAC,QAAa;AAAA,QACf,OAAO;AAAA,QACP,SAAS,IAAI,wBAAS,GAAG;AAAA,MAC3B,CAAC;AAAA,IACH;AAEA,QAAI,SAAS,GAAG,uBAAI,IAAI,yBAAyB,0BAA0B,eAAe;AAAA,EAC5F;AACF;AAEA,MAAM,cAAc,IAAI,YAAY;AACpC,YAAY,KAAK;AACjB,IAAO,wBAAQ;",
  "names": ["passport", "GoogleStrategy", "User", "userServices", "RefreshToken"]
}
