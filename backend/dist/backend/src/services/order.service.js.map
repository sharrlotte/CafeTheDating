{
  "version": 3,
  "sources": ["../../../../src/services/order.service.ts"],
  "sourcesContent": ["import { AuthUser } from '@/@types/auth.type'\r\nimport { CreateOrderBody } from '@/@types/request.type'\r\nimport Order, { OrderState } from '@/models/schemas/Order.schema'\r\nimport { databaseService } from '@/services/database.service'\r\nimport { ObjectId } from 'mongodb'\r\nimport { ParsedUrlQuery } from 'querystring'\r\n\r\nclass OrderService {\r\n  async getAllOrderByUser(query: ParsedUrlQuery, userId: string) {\r\n    const state = query.state as (OrderState & 'all') | undefined\r\n\r\n    let orders: Order[]\r\n\r\n    if (state && state !== 'all') {\r\n      orders = await databaseService.orders.find({ state: state, user_id: new ObjectId(userId) }).toArray()\r\n    } else {\r\n      orders = await databaseService.orders.find({ user_id: new ObjectId(userId) }).toArray()\r\n    }\r\n\r\n    const items = orders.map(async (item) => {\r\n      const product = await databaseService.products.findOne({ _id: new ObjectId(item.product_id) })\r\n\r\n      if (!product) {\r\n        throw new Error('Order product not found')\r\n      }\r\n\r\n      item.product_name = product.name\r\n      return item\r\n    })\r\n\r\n    return Promise.all(items)\r\n  }\r\n\r\n  async updateOrder(id: string, state: OrderState) {\r\n    return await databaseService.orders.findOneAndUpdate(\r\n      { _id: new ObjectId(id) },\r\n      {\r\n        $set: {\r\n          state: state,\r\n          updated_at: new Date()\r\n        }\r\n      },\r\n      { upsert: false }\r\n    )\r\n  }\r\n  async createOrder(user: AuthUser, payload: CreateOrderBody) {\r\n    console.log(payload)\r\n    const orders = payload.orders.map(async ({ amount, product_id }) => {\r\n      const { price, discount } = await databaseService.products.findOne({ _id: new ObjectId(product_id) })\r\n\r\n      return new Order({\r\n        address: payload.address,\r\n        price,\r\n        discount,\r\n        amount,\r\n        product_id: new ObjectId(product_id),\r\n        user_id: new ObjectId(user._id),\r\n        state: 'pending'\r\n      })\r\n    })\r\n\r\n    return await databaseService.orders.insertMany(await Promise.all(orders))\r\n  }\r\n}\r\n\r\nconst orderService = new OrderService()\r\n\r\nexport default orderService\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAAkC;AAClC,sBAAgC;AAChC,qBAAyB;AAGzB,MAAM,aAAa;AAAA,EACjB,MAAM,kBAAkB,OAAuB,QAAgB;AAC7D,UAAM,QAAQ,MAAM;AAEpB,QAAI;AAEJ,QAAI,SAAS,UAAU,OAAO;AAC5B,eAAS,MAAM,gCAAgB,OAAO,KAAK,EAAE,OAAc,SAAS,IAAI,wBAAS,MAAM,EAAE,CAAC,EAAE,QAAQ;AAAA,IACtG,OAAO;AACL,eAAS,MAAM,gCAAgB,OAAO,KAAK,EAAE,SAAS,IAAI,wBAAS,MAAM,EAAE,CAAC,EAAE,QAAQ;AAAA,IACxF;AAEA,UAAM,QAAQ,OAAO,IAAI,OAAO,SAAS;AACvC,YAAM,UAAU,MAAM,gCAAgB,SAAS,QAAQ,EAAE,KAAK,IAAI,wBAAS,KAAK,UAAU,EAAE,CAAC;AAE7F,UAAI,CAAC,SAAS;AACZ,cAAM,IAAI,MAAM,yBAAyB;AAAA,MAC3C;AAEA,WAAK,eAAe,QAAQ;AAC5B,aAAO;AAAA,IACT,CAAC;AAED,WAAO,QAAQ,IAAI,KAAK;AAAA,EAC1B;AAAA,EAEA,MAAM,YAAY,IAAY,OAAmB;AAC/C,WAAO,MAAM,gCAAgB,OAAO;AAAA,MAClC,EAAE,KAAK,IAAI,wBAAS,EAAE,EAAE;AAAA,MACxB;AAAA,QACE,MAAM;AAAA,UACJ;AAAA,UACA,YAAY,oBAAI,KAAK;AAAA,QACvB;AAAA,MACF;AAAA,MACA,EAAE,QAAQ,MAAM;AAAA,IAClB;AAAA,EACF;AAAA,EACA,MAAM,YAAY,MAAgB,SAA0B;AAC1D,YAAQ,IAAI,OAAO;AACnB,UAAM,SAAS,QAAQ,OAAO,IAAI,OAAO,EAAE,QAAQ,WAAW,MAAM;AAClE,YAAM,EAAE,OAAO,SAAS,IAAI,MAAM,gCAAgB,SAAS,QAAQ,EAAE,KAAK,IAAI,wBAAS,UAAU,EAAE,CAAC;AAEpG,aAAO,IAAI,aAAAA,QAAM;AAAA,QACf,SAAS,QAAQ;AAAA,QACjB;AAAA,QACA;AAAA,QACA;AAAA,QACA,YAAY,IAAI,wBAAS,UAAU;AAAA,QACnC,SAAS,IAAI,wBAAS,KAAK,GAAG;AAAA,QAC9B,OAAO;AAAA,MACT,CAAC;AAAA,IACH,CAAC;AAED,WAAO,MAAM,gCAAgB,OAAO,WAAW,MAAM,QAAQ,IAAI,MAAM,CAAC;AAAA,EAC1E;AACF;AAEA,MAAM,eAAe,IAAI,aAAa;AAEtC,IAAO,wBAAQ;",
  "names": ["Order"]
}
