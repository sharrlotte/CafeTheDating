{
  "version": 3,
  "sources": ["../../../../src/middlewares/users.middlewares.ts"],
  "sourcesContent": ["import { VALIDATION_MESSAGES } from '@/constants/message'\r\nimport { checkSchema } from 'express-validator'\r\nimport validate from '@/utils/validate'\r\nimport { ErrorWithStatus } from '@/models/errors/Errors.schema'\r\nimport { StatusCodes } from 'http-status-codes'\r\nimport { databaseService } from '@/services/database.service'\r\n\r\nexport const refreshTokenValidator = validate(\r\n  checkSchema(\r\n    {\r\n      refresh_token: {\r\n        trim: true,\r\n        custom: {\r\n          options: async (value) => {\r\n            if (!value) {\r\n              throw new ErrorWithStatus({\r\n                statusCode: StatusCodes.UNAUTHORIZED,\r\n                message: VALIDATION_MESSAGES.USER.REFRESH_TOKEN.REFRESH_TOKEN_IS_REQUIRED\r\n              })\r\n            }\r\n\r\n            // const result = await databaseService.refreshTokens.findOne({ token: value })\r\n\r\n            // if (!result) {\r\n            //   throw new ErrorWithStatus({\r\n            //     message: VALIDATION_MESSAGES.USER.REFRESH_TOKEN.REFRESH_TOKEN_IS_NOT_EXIST,\r\n            //     statusCode: StatusCodes.UNAUTHORIZED\r\n            //   })\r\n            // }\r\n\r\n            return true\r\n          }\r\n        }\r\n      }\r\n    },\r\n    ['body']\r\n  )\r\n)\r\n\r\nexport const getAllUserValidator = validate(\r\n  checkSchema(\r\n    {\r\n      query: {\r\n        trim: true,\r\n        isString: {\r\n          errorMessage: VALIDATION_MESSAGES.USER.COMMONS.USERNAME_MUST_BE_STRING\r\n        },\r\n        optional: true\r\n      },\r\n      role: {\r\n        trim: true,\r\n        isString: {\r\n          errorMessage: 'Role must be a string'\r\n        },\r\n        notEmpty: {\r\n          errorMessage: 'Role is required'\r\n        }\r\n      }\r\n    },\r\n    ['query']\r\n  )\r\n)\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoC;AACpC,+BAA4B;AAC5B,sBAAqB;AACrB,oBAAgC;AAChC,+BAA4B;AAGrB,MAAM,4BAAwB,gBAAAA;AAAA,MACnC;AAAA,IACE;AAAA,MACE,eAAe;AAAA,QACb,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,SAAS,OAAO,UAAU;AACxB,gBAAI,CAAC,OAAO;AACV,oBAAM,IAAI,8BAAgB;AAAA,gBACxB,YAAY,qCAAY;AAAA,gBACxB,SAAS,mCAAoB,KAAK,cAAc;AAAA,cAClD,CAAC;AAAA,YACH;AAWA,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA,CAAC,MAAM;AAAA,EACT;AACF;AAEO,MAAM,0BAAsB,gBAAAA;AAAA,MACjC;AAAA,IACE;AAAA,MACE,OAAO;AAAA,QACL,MAAM;AAAA,QACN,UAAU;AAAA,UACR,cAAc,mCAAoB,KAAK,QAAQ;AAAA,QACjD;AAAA,QACA,UAAU;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,QACJ,MAAM;AAAA,QACN,UAAU;AAAA,UACR,cAAc;AAAA,QAChB;AAAA,QACA,UAAU;AAAA,UACR,cAAc;AAAA,QAChB;AAAA,MACF;AAAA,IACF;AAAA,IACA,CAAC,OAAO;AAAA,EACV;AACF;",
  "names": ["validate"]
}
