{
  "version": 3,
  "sources": ["../../../../src/middlewares/auth.middlewares.ts"],
  "sourcesContent": ["import { Request, Response, NextFunction } from 'express'\r\nimport { StatusCodes } from 'http-status-codes'\r\nimport { env } from '@/config/environment.config'\r\nimport { UserRole } from '@/constants/enums'\r\nimport { VALIDATION_MESSAGES } from '@/constants/message'\r\nimport { ErrorWithStatus } from '@/models/errors/Errors.schema'\r\nimport { verifyToken } from '@/utils/jwt'\r\nimport { AuthUser } from '@/@types/auth.type'\r\n\r\nexport const authMiddleware = async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    const bearer = req.get('Authorization')\r\n    if (!bearer) {\r\n      return next()\r\n    }\r\n\r\n    const tokens = bearer.split(' ')\r\n    if (tokens.length !== 2) {\r\n      throw new ErrorWithStatus({\r\n        message: VALIDATION_MESSAGES.TOKEN.INVALID_BEARER_TOKEN,\r\n        statusCode: StatusCodes.UNAUTHORIZED\r\n      })\r\n    }\r\n\r\n    const access_token = tokens[1]\r\n    const user = await verifyToken({\r\n      token: access_token,\r\n      secretOrPublicKey: env.jwt.secret_key\r\n    })\r\n\r\n    req.user = user as AuthUser\r\n    return next()\r\n  } catch (error) {\r\n    return next(error)\r\n  }\r\n}\r\n\r\nexport const requireLoginMiddleware = [\r\n  authMiddleware,\r\n  (req: Request, res: Response, next: NextFunction) => {\r\n    if (!req.user) {\r\n      return next(\r\n        new ErrorWithStatus({\r\n          statusCode: StatusCodes.UNAUTHORIZED,\r\n          message: VALIDATION_MESSAGES.USER.COMMONS.USER_NOT_LOGIN\r\n        })\r\n      )\r\n    }\r\n    return next()\r\n  }\r\n]\r\n\r\nexport const requireRoleMiddleware = (...roles: UserRole[]) => {\r\n  return [\r\n    authMiddleware,\r\n    async (req: Request, res: Response, next: NextFunction) => {\r\n      if (!req.user || !roles.includes(req.user.role)) {\r\n        return next(\r\n          new ErrorWithStatus({\r\n            statusCode: StatusCodes.UNAUTHORIZED,\r\n            message: VALIDATION_MESSAGES.USER.COMMONS.USER_NOT_LOGIN\r\n          })\r\n        )\r\n      }\r\n      return next()\r\n    }\r\n  ]\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,+BAA4B;AAC5B,yBAAoB;AAEpB,qBAAoC;AACpC,oBAAgC;AAChC,iBAA4B;AAGrB,MAAM,iBAAiB,OAAO,KAAc,KAAe,SAAuB;AACvF,MAAI;AACF,UAAM,SAAS,IAAI,IAAI,eAAe;AACtC,QAAI,CAAC,QAAQ;AACX,aAAO,KAAK;AAAA,IACd;AAEA,UAAM,SAAS,OAAO,MAAM,GAAG;AAC/B,QAAI,OAAO,WAAW,GAAG;AACvB,YAAM,IAAI,8BAAgB;AAAA,QACxB,SAAS,mCAAoB,MAAM;AAAA,QACnC,YAAY,qCAAY;AAAA,MAC1B,CAAC;AAAA,IACH;AAEA,UAAM,eAAe,OAAO,CAAC;AAC7B,UAAM,OAAO,UAAM,wBAAY;AAAA,MAC7B,OAAO;AAAA,MACP,mBAAmB,uBAAI,IAAI;AAAA,IAC7B,CAAC;AAED,QAAI,OAAO;AACX,WAAO,KAAK;AAAA,EACd,SAAS,OAAP;AACA,WAAO,KAAK,KAAK;AAAA,EACnB;AACF;AAEO,MAAM,yBAAyB;AAAA,EACpC;AAAA,EACA,CAAC,KAAc,KAAe,SAAuB;AACnD,QAAI,CAAC,IAAI,MAAM;AACb,aAAO;AAAA,QACL,IAAI,8BAAgB;AAAA,UAClB,YAAY,qCAAY;AAAA,UACxB,SAAS,mCAAoB,KAAK,QAAQ;AAAA,QAC5C,CAAC;AAAA,MACH;AAAA,IACF;AACA,WAAO,KAAK;AAAA,EACd;AACF;AAEO,MAAM,wBAAwB,IAAI,UAAsB;AAC7D,SAAO;AAAA,IACL;AAAA,IACA,OAAO,KAAc,KAAe,SAAuB;AACzD,UAAI,CAAC,IAAI,QAAQ,CAAC,MAAM,SAAS,IAAI,KAAK,IAAI,GAAG;AAC/C,eAAO;AAAA,UACL,IAAI,8BAAgB;AAAA,YAClB,YAAY,qCAAY;AAAA,YACxB,SAAS,mCAAoB,KAAK,QAAQ;AAAA,UAC5C,CAAC;AAAA,QACH;AAAA,MACF;AACA,aAAO,KAAK;AAAA,IACd;AAAA,EACF;AACF;",
  "names": []
}
