{
  "version": 3,
  "sources": ["../../../../src/services/province.service.ts"],
  "sourcesContent": ["import { ErrorWithStatus } from '@/models/errors/Errors.schema'\r\nimport Province from '@/models/schemas/Province.schema'\r\nimport fs from 'fs'\r\nimport { StatusCodes } from 'http-status-codes'\r\nimport { omit } from 'lodash'\r\n\r\nconst provinceData = JSON.parse(fs.readFileSync('province.json', 'utf-8')) as Province[]\r\n\r\nclass ProvinceService {\r\n  async getProvince() {\r\n    return provinceData.map((item) => omit(item, 'districts'))\r\n  }\r\n\r\n  async getDistrict(province_code: string) {\r\n    const province = provinceData.find((item) => item.code === Number(province_code))\r\n    if (!province) {\r\n      throw new ErrorWithStatus({\r\n        message: 'Province not found',\r\n        statusCode: StatusCodes.NOT_FOUND\r\n      })\r\n    }\r\n\r\n    return province.districts.map((item) => omit(item, 'wards'))\r\n  }\r\n\r\n  async getWard(province_code: string, district_code: string) {\r\n    const province = provinceData.find((item) => item.code === Number(province_code))\r\n    if (!province) {\r\n      throw new ErrorWithStatus({\r\n        message: 'Province not found',\r\n        statusCode: StatusCodes.NOT_FOUND\r\n      })\r\n    }\r\n\r\n    const district = province.districts.find((item) => item.code === Number(district_code))\r\n\r\n    if (!district) {\r\n      throw new ErrorWithStatus({\r\n        message: 'District not found',\r\n        statusCode: StatusCodes.NOT_FOUND\r\n      })\r\n    }\r\n\r\n    return district.wards\r\n  }\r\n}\r\nconst provinceService = new ProvinceService()\r\nexport default provinceService\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgC;AAEhC,gBAAe;AACf,+BAA4B;AAC5B,oBAAqB;AAErB,MAAM,eAAe,KAAK,MAAM,UAAAA,QAAG,aAAa,iBAAiB,OAAO,CAAC;AAEzE,MAAM,gBAAgB;AAAA,EACpB,MAAM,cAAc;AAClB,WAAO,aAAa,IAAI,CAAC,aAAS,oBAAK,MAAM,WAAW,CAAC;AAAA,EAC3D;AAAA,EAEA,MAAM,YAAY,eAAuB;AACvC,UAAM,WAAW,aAAa,KAAK,CAAC,SAAS,KAAK,SAAS,OAAO,aAAa,CAAC;AAChF,QAAI,CAAC,UAAU;AACb,YAAM,IAAI,8BAAgB;AAAA,QACxB,SAAS;AAAA,QACT,YAAY,qCAAY;AAAA,MAC1B,CAAC;AAAA,IACH;AAEA,WAAO,SAAS,UAAU,IAAI,CAAC,aAAS,oBAAK,MAAM,OAAO,CAAC;AAAA,EAC7D;AAAA,EAEA,MAAM,QAAQ,eAAuB,eAAuB;AAC1D,UAAM,WAAW,aAAa,KAAK,CAAC,SAAS,KAAK,SAAS,OAAO,aAAa,CAAC;AAChF,QAAI,CAAC,UAAU;AACb,YAAM,IAAI,8BAAgB;AAAA,QACxB,SAAS;AAAA,QACT,YAAY,qCAAY;AAAA,MAC1B,CAAC;AAAA,IACH;AAEA,UAAM,WAAW,SAAS,UAAU,KAAK,CAAC,SAAS,KAAK,SAAS,OAAO,aAAa,CAAC;AAEtF,QAAI,CAAC,UAAU;AACb,YAAM,IAAI,8BAAgB;AAAA,QACxB,SAAS;AAAA,QACT,YAAY,qCAAY;AAAA,MAC1B,CAAC;AAAA,IACH;AAEA,WAAO,SAAS;AAAA,EAClB;AACF;AACA,MAAM,kBAAkB,IAAI,gBAAgB;AAC5C,IAAO,2BAAQ;",
  "names": ["fs"]
}
