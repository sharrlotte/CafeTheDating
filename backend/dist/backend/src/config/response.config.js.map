{
  "version": 3,
  "sources": ["../../../../src/config/response.config.ts"],
  "sourcesContent": ["import { Response } from 'express'\r\nimport moment from 'moment'\r\nimport { StatusCodes } from 'http-status-codes'\r\n\r\nexport const sendResponse = {\r\n  noContent: (res: Response, data: any, message: string, note?: null) => {\r\n    res.status(StatusCodes.NO_CONTENT).json({\r\n      statusCode: StatusCodes.NO_CONTENT,\r\n      message,\r\n      data,\r\n      dateTime: moment(new Date()).format('DD-MM-YYYY\\\\tHH:mm:ssSSS'),\r\n      messageConstants: note\r\n    })\r\n  },\r\n  badRequest: (res: Response, data: any, message: string, note?: null) => {\r\n    res.status(StatusCodes.BAD_REQUEST).json({\r\n      statusCode: StatusCodes.BAD_REQUEST,\r\n      message,\r\n      data,\r\n      dateTime: moment(new Date()).format('DD-MM-YYYY\\\\tHH:mm:ssSSS'),\r\n      messageConstants: note\r\n    })\r\n  },\r\n  unauthorized: (res: Response, data: any, message: string, note?: null) => {\r\n    res.status(StatusCodes.UNAUTHORIZED).json({\r\n      statusCode: StatusCodes.UNAUTHORIZED,\r\n      message,\r\n      data,\r\n      dateTime: moment(new Date()).format('DD-MM-YYYY\\\\tHH:mm:ssSSS'),\r\n      messageConstants: note\r\n    })\r\n  },\r\n  forbidden: (res: Response, data: any, message: string, note?: null) => {\r\n    res.status(StatusCodes.FORBIDDEN).json({\r\n      statusCode: StatusCodes.FORBIDDEN,\r\n      message,\r\n      data,\r\n      dateTime: moment(new Date()).format('DD-MM-YYYY\\\\tHH:mm:ssSSS'),\r\n      messageConstants: note\r\n    })\r\n  },\r\n  notFound: (res: Response, data: any, message: string, note?: null) => {\r\n    res.status(StatusCodes.NOT_FOUND).json({\r\n      statusCode: StatusCodes.NOT_FOUND,\r\n      message,\r\n      data,\r\n      dateTime: moment(new Date()).format('DD-MM-YYYY\\\\tHH:mm:ssSSS'),\r\n      messageConstants: note\r\n    })\r\n  },\r\n  noAcceptable: (res: Response, data: any, message: string, note?: null) => {\r\n    res.status(StatusCodes.NOT_ACCEPTABLE).json({\r\n      statusCode: StatusCodes.NOT_ACCEPTABLE,\r\n      message,\r\n      data,\r\n      dateTime: moment(new Date()).format('DD-MM-YYYY\\\\tHH:mm:ssSSS'),\r\n      messageConstants: note\r\n    })\r\n  },\r\n  conflict: (res: Response, data: any, message: string, note?: null) => {\r\n    res.status(StatusCodes.CONFLICT).json({\r\n      statusCode: StatusCodes.CONFLICT,\r\n      message,\r\n      data,\r\n      dateTime: moment(new Date()).format('DD-MM-YYYY\\\\tHH:mm:ssSSS'),\r\n      messageConstants: note\r\n    })\r\n  },\r\n  tooManyRequest: (res: Response, message: string, note?: null) => {\r\n    res.status(StatusCodes.TOO_MANY_REQUESTS).json({\r\n      statusCode: StatusCodes.TOO_MANY_REQUESTS,\r\n      message,\r\n      dateTime: moment(new Date()).format('DD-MM-YYYY\\\\tHH:mm:ssSSS'),\r\n      messageConstants: note\r\n    })\r\n  },\r\n  error: (res: Response, message: string, note?: null) => {\r\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\r\n      statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n      message,\r\n      dateTime: moment(new Date()).format('DD-MM-YYYY\\\\tHH:mm:ssSSS'),\r\n      messageConstants: note\r\n    })\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["moment"]
}
