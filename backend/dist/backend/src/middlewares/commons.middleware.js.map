{
  "version": 3,
  "sources": ["../../../../src/middlewares/commons.middleware.ts"],
  "sourcesContent": ["import { checkSchema } from 'express-validator'\r\nimport { StatusCodes } from 'http-status-codes'\r\nimport { ObjectId } from 'mongodb'\r\nimport { VALIDATION_MESSAGES } from '@/constants/message'\r\nimport { ErrorWithStatus } from '@/models/errors/Errors.schema'\r\nimport validate from '@/utils/validate'\r\n\r\nexport const paginationValidator = validate(\r\n  checkSchema({\r\n    pageIndex: {\r\n      trim: true,\r\n      isInt: {\r\n        options: {\r\n          min: 1\r\n        },\r\n        errorMessage: VALIDATION_MESSAGES.PAGINATION.PAGE_CAN_NOT_LESS_THAN_ZERO\r\n      }\r\n    },\r\n    pageSize: {\r\n      trim: true,\r\n      isInt: {\r\n        options: {\r\n          min: 1,\r\n          max: 100\r\n        },\r\n        errorMessage: VALIDATION_MESSAGES.PAGINATION.ITEMS_IS_NOT_IN_RANGE\r\n      }\r\n    }\r\n  })\r\n)\r\n\r\nexport const objectIdValidator = validate(\r\n  checkSchema(\r\n    {\r\n      id: {\r\n        trim: true,\r\n        custom: {\r\n          options: async (value) => {\r\n            if (!ObjectId.isValid(value)) {\r\n              throw new ErrorWithStatus({\r\n                message: VALIDATION_MESSAGES.USER.COMMONS.USER_ID_IS_INVALID,\r\n                statusCode: StatusCodes.NOT_FOUND\r\n              })\r\n            }\r\n\r\n            return true\r\n          }\r\n        }\r\n      }\r\n    },\r\n    ['params']\r\n  )\r\n)\r\n\r\nexport const validateObjectId = (id: string) => {\r\n  if (!ObjectId.isValid(id)) {\r\n    throw new ErrorWithStatus({\r\n      message: VALIDATION_MESSAGES.USER.COMMONS.USER_ID_IS_INVALID,\r\n      statusCode: StatusCodes.NOT_FOUND\r\n    })\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA4B;AAC5B,+BAA4B;AAC5B,qBAAyB;AACzB,qBAAoC;AACpC,oBAAgC;AAChC,sBAAqB;AAEd,MAAM,0BAAsB,gBAAAA;AAAA,MACjC,sCAAY;AAAA,IACV,WAAW;AAAA,MACT,MAAM;AAAA,MACN,OAAO;AAAA,QACL,SAAS;AAAA,UACP,KAAK;AAAA,QACP;AAAA,QACA,cAAc,mCAAoB,WAAW;AAAA,MAC/C;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,QACL,SAAS;AAAA,UACP,KAAK;AAAA,UACL,KAAK;AAAA,QACP;AAAA,QACA,cAAc,mCAAoB,WAAW;AAAA,MAC/C;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEO,MAAM,wBAAoB,gBAAAA;AAAA,MAC/B;AAAA,IACE;AAAA,MACE,IAAI;AAAA,QACF,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,SAAS,OAAO,UAAU;AACxB,gBAAI,CAAC,wBAAS,QAAQ,KAAK,GAAG;AAC5B,oBAAM,IAAI,8BAAgB;AAAA,gBACxB,SAAS,mCAAoB,KAAK,QAAQ;AAAA,gBAC1C,YAAY,qCAAY;AAAA,cAC1B,CAAC;AAAA,YACH;AAEA,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA,CAAC,QAAQ;AAAA,EACX;AACF;AAEO,MAAM,mBAAmB,CAAC,OAAe;AAC9C,MAAI,CAAC,wBAAS,QAAQ,EAAE,GAAG;AACzB,UAAM,IAAI,8BAAgB;AAAA,MACxB,SAAS,mCAAoB,KAAK,QAAQ;AAAA,MAC1C,YAAY,qCAAY;AAAA,IAC1B,CAAC;AAAA,EACH;AACF;",
  "names": ["validate"]
}
