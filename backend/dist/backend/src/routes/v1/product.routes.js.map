{
  "version": 3,
  "sources": ["../../../../../src/routes/v1/product.routes.ts"],
  "sourcesContent": ["import { Router } from 'express'\r\nimport { UserRole } from '@/constants/enums'\r\nimport productController from '@/controllers/product.controllers'\r\nimport { requireRoleMiddleware } from '@/middlewares/auth.middlewares'\r\nimport { objectIdValidator } from '@/middlewares/commons.middleware'\r\nimport { createProductValidator, getAllProductValidator, updateProductValidator } from '@/middlewares/product.middlewares'\r\nimport { wrapRequestHandler } from '@/utils/handler'\r\nimport multerMiddleware from '@/middlewares/uploadFile.middleware'\r\n\r\nconst productRouter = Router()\r\n\r\nproductRouter.get('/', getAllProductValidator, wrapRequestHandler(productController.getAllProduct))\r\n\r\nproductRouter.post('/', multerMiddleware.single('image'), requireRoleMiddleware(UserRole.Admin), createProductValidator, wrapRequestHandler(productController.createProduct))\r\n\r\nproductRouter.put('/:id', multerMiddleware.single('image'), requireRoleMiddleware(UserRole.Admin), objectIdValidator, updateProductValidator, wrapRequestHandler(productController.updateProduct))\r\n\r\nproductRouter.delete('/:id', requireRoleMiddleware(UserRole.Admin), objectIdValidator, wrapRequestHandler(productController.deleteProduct))\r\n\r\nexport default productRouter\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAuB;AACvB,mBAAyB;AACzB,qBAA8B;AAC9B,kBAAsC;AACtC,qBAAkC;AAClC,IAAAA,kBAAuF;AACvF,qBAAmC;AACnC,wBAA6B;AAE7B,MAAM,oBAAgB,uBAAO;AAE7B,cAAc,IAAI,KAAK,4CAAwB,mCAAmB,eAAAC,QAAkB,aAAa,CAAC;AAElG,cAAc,KAAK,KAAK,kBAAAC,QAAiB,OAAO,OAAO,OAAG,mCAAsB,sBAAS,KAAK,GAAG,4CAAwB,mCAAmB,eAAAD,QAAkB,aAAa,CAAC;AAE5K,cAAc,IAAI,QAAQ,kBAAAC,QAAiB,OAAO,OAAO,OAAG,mCAAsB,sBAAS,KAAK,GAAG,kCAAmB,4CAAwB,mCAAmB,eAAAD,QAAkB,aAAa,CAAC;AAEjM,cAAc,OAAO,YAAQ,mCAAsB,sBAAS,KAAK,GAAG,sCAAmB,mCAAmB,eAAAA,QAAkB,aAAa,CAAC;AAE1I,IAAO,yBAAQ;",
  "names": ["import_product", "productController", "multerMiddleware"]
}
