{
  "version": 3,
  "sources": ["../../../src/main.ts"],
  "sourcesContent": ["import express, { Request, Response, NextFunction } from 'express'\r\nimport { env } from './config/environment.config'\r\nimport { createServer } from 'http'\r\nimport helmet from 'helmet'\r\nimport compression from 'compression'\r\nimport cors from 'cors'\r\nimport morgan from 'morgan'\r\nimport bodyParser from 'body-parser'\r\nimport cookieParser from 'cookie-parser'\r\nimport rootRouter from './routes'\r\nimport { rateLimiterMiddleware } from './middlewares/rateLimiter.middleware'\r\nimport { databaseService } from './services/database.service'\r\nimport { defaultErrorHandler } from './middlewares/errors.middleware'\r\nimport exitHook from 'async-exit-hook'\r\nimport { DATABASE_MESSAGE } from './constants/message'\r\n\r\nconst app = express()\r\nconst httpServer = createServer(app)\r\napp.use(\r\n  helmet({\r\n    contentSecurityPolicy: {\r\n      directives: {\r\n        defaultSrc: ['*'],\r\n        scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\r\n        styleSrc: [\"'self'\", \"'unsafe-inline'\", 'https://fonts.googleapis.com/css', 'https://use.fontawesome.com/releases/v5.12.0/css/all.css'],\r\n        objectSrc: [\"'none'\"],\r\n        upgradeInsecureRequests: []\r\n      }\r\n    }\r\n  })\r\n)\r\n\r\napp.use(compression())\r\napp.use(cors())\r\napp.use(morgan('dev'))\r\napp.disable('x-powered-by')\r\napp.use(express.json())\r\napp.use(express.urlencoded({ limit: '50mb', extended: true }))\r\napp.use(bodyParser.urlencoded({ extended: false, limit: '50mb' }))\r\napp.use(bodyParser.json({ limit: '50mb' }))\r\napp.use(cookieParser())\r\napp.use(express.static('.'))\r\nif (env.node_env === 'production') {\r\n  app.use('/api', rateLimiterMiddleware)\r\n}\r\napp.use('/api/v1', rootRouter)\r\napp.use((req: Request, res: Response, next: NextFunction) => {\r\n  res.header('Access-Control-Allow-Origin', '*')\r\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization')\r\n  if (req.method == 'OPTIONS') {\r\n    res.header('Access-Control-Allow-Methods', 'PUT, POST, PATCH, DELETE, GET')\r\n    return res.status(200).json({})\r\n  }\r\n  next()\r\n})\r\n\r\napp.disable('etag')\r\ndatabaseService.connect()\r\napp.use(defaultErrorHandler)\r\nhttpServer.listen(env.server.port, env.server.host, () => {\r\n  console.log(`\uD83D\uDE80 Server Running On Port ${env.server.port}`)\r\n})\r\n\r\nexitHook(() => {\r\n  databaseService.disconnect()\r\n  console.log(DATABASE_MESSAGE.DB_MAIN.DISCONNECT)\r\n})\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA,qBAAyD;AACzD,yBAAoB;AACpB,kBAA6B;AAC7B,oBAAmB;AACnB,yBAAwB;AACxB,kBAAiB;AACjB,oBAAmB;AACnB,yBAAuB;AACvB,2BAAyB;AACzB,oBAAuB;AACvB,yBAAsC;AACtC,sBAAgC;AAChC,oBAAoC;AACpC,6BAAqB;AACrB,qBAAiC;AAEjC,MAAM,UAAM,eAAAA,SAAQ;AACpB,MAAM,iBAAa,0BAAa,GAAG;AACnC,IAAI;AAAA,MACF,cAAAC,SAAO;AAAA,IACL,uBAAuB;AAAA,MACrB,YAAY;AAAA,QACV,YAAY,CAAC,GAAG;AAAA,QAChB,WAAW,CAAC,UAAU,mBAAmB,eAAe;AAAA,QACxD,UAAU,CAAC,UAAU,mBAAmB,oCAAoC,0DAA0D;AAAA,QACtI,WAAW,CAAC,QAAQ;AAAA,QACpB,yBAAyB,CAAC;AAAA,MAC5B;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,IAAI,QAAI,mBAAAC,SAAY,CAAC;AACrB,IAAI,QAAI,YAAAC,SAAK,CAAC;AACd,IAAI,QAAI,cAAAC,SAAO,KAAK,CAAC;AACrB,IAAI,QAAQ,cAAc;AAC1B,IAAI,IAAI,eAAAJ,QAAQ,KAAK,CAAC;AACtB,IAAI,IAAI,eAAAA,QAAQ,WAAW,EAAE,OAAO,QAAQ,UAAU,KAAK,CAAC,CAAC;AAC7D,IAAI,IAAI,mBAAAK,QAAW,WAAW,EAAE,UAAU,OAAO,OAAO,OAAO,CAAC,CAAC;AACjE,IAAI,IAAI,mBAAAA,QAAW,KAAK,EAAE,OAAO,OAAO,CAAC,CAAC;AAC1C,IAAI,QAAI,qBAAAC,SAAa,CAAC;AACtB,IAAI,IAAI,eAAAN,QAAQ,OAAO,GAAG,CAAC;AAC3B,IAAI,uBAAI,aAAa,cAAc;AACjC,MAAI,IAAI,QAAQ,wCAAqB;AACvC;AACA,IAAI,IAAI,WAAW,cAAAO,OAAU;AAC7B,IAAI,IAAI,CAAC,KAAc,KAAe,SAAuB;AAC3D,MAAI,OAAO,+BAA+B,GAAG;AAC7C,MAAI,OAAO,gCAAgC,+DAA+D;AAC1G,MAAI,IAAI,UAAU,WAAW;AAC3B,QAAI,OAAO,gCAAgC,+BAA+B;AAC1E,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,CAAC,CAAC;AAAA,EAChC;AACA,OAAK;AACP,CAAC;AAED,IAAI,QAAQ,MAAM;AAClB,gCAAgB,QAAQ;AACxB,IAAI,IAAI,iCAAmB;AAC3B,WAAW,OAAO,uBAAI,OAAO,MAAM,uBAAI,OAAO,MAAM,MAAM;AACxD,UAAQ,IAAI,oCAA6B,uBAAI,OAAO,MAAM;AAC5D,CAAC;AAAA,IAED,uBAAAC,SAAS,MAAM;AACb,kCAAgB,WAAW;AAC3B,UAAQ,IAAI,gCAAiB,QAAQ,UAAU;AACjD,CAAC;",
  "names": ["express", "helmet", "compression", "cors", "morgan", "bodyParser", "cookieParser", "rootRouter", "exitHook"]
}
