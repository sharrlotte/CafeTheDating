{
  "version": 3,
  "sources": ["../../../../src/services/database.service.ts"],
  "sourcesContent": ["import { Db, MongoClient, ServerApiVersion, Collection } from 'mongodb'\r\nimport { env } from '@/config/environment.config'\r\nimport Like from '@/models/schemas/Like.shema'\r\nimport Product from '@/models/schemas/Product.schema'\r\nimport RefreshToken from '@/models/schemas/RefreshToken.schema'\r\nimport Star from '@/models/schemas/Star.schema'\r\nimport User from '@/models/schemas/Users.schema'\r\nimport Order from '@/models/schemas/Order.schema'\r\nclass DatabaseServices {\r\n  private client: MongoClient | undefined\r\n  private db: Db\r\n  constructor() {\r\n    this.client = new MongoClient(env.database.main.url, {\r\n      serverApi: {\r\n        version: ServerApiVersion.v1,\r\n        strict: true,\r\n        deprecationErrors: true\r\n      }\r\n    })\r\n    this.db = this.client.db(env.database.main.name)\r\n  }\r\n  async connect() {\r\n    try {\r\n      await this.db.command({ ping: 1 })\r\n      console.log('Connected to database')\r\n    } catch (error) {\r\n      console.log(`\u26D4\uFE0F Unable to Connect MongoDB: ${error}`)\r\n    }\r\n  }\r\n  async disconnect() {\r\n    try {\r\n      await this.client.close()\r\n    } catch (error) {\r\n      console.log(`\u26D4\uFE0F Unable to Connect MongoDB: ${error}`)\r\n    }\r\n  }\r\n  // Get collection user\r\n  get users(): Collection<User> {\r\n    return this.db.collection(env.database.main.collection.users as string)\r\n  }\r\n\r\n  // Get collection user\r\n  get refreshTokens(): Collection<RefreshToken> {\r\n    return this.db.collection(env.database.main.collection.refresh_tokens as string)\r\n  }\r\n\r\n  get products(): Collection<Product> {\r\n    return this.db.collection(env.database.main.collection.product as string)\r\n  }\r\n\r\n  get stars(): Collection<Star> {\r\n    return this.db.collection(env.database.main.collection.star as string)\r\n  }\r\n\r\n  get likes(): Collection<Like> {\r\n    return this.db.collection(env.database.main.collection.like as string)\r\n  }\r\n  get orders(): Collection<Order> {\r\n    return this.db.collection(env.database.main.collection.order as string)\r\n  }\r\n}\r\n\r\nexport const databaseService = new DatabaseServices()\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA8D;AAC9D,yBAAoB;AAOpB,MAAM,iBAAiB;AAAA,EACb;AAAA,EACA;AAAA,EACR,cAAc;AACZ,SAAK,SAAS,IAAI,2BAAY,uBAAI,SAAS,KAAK,KAAK;AAAA,MACnD,WAAW;AAAA,QACT,SAAS,gCAAiB;AAAA,QAC1B,QAAQ;AAAA,QACR,mBAAmB;AAAA,MACrB;AAAA,IACF,CAAC;AACD,SAAK,KAAK,KAAK,OAAO,GAAG,uBAAI,SAAS,KAAK,IAAI;AAAA,EACjD;AAAA,EACA,MAAM,UAAU;AACd,QAAI;AACF,YAAM,KAAK,GAAG,QAAQ,EAAE,MAAM,EAAE,CAAC;AACjC,cAAQ,IAAI,uBAAuB;AAAA,IACrC,SAAS,OAAP;AACA,cAAQ,IAAI,2CAAiC,OAAO;AAAA,IACtD;AAAA,EACF;AAAA,EACA,MAAM,aAAa;AACjB,QAAI;AACF,YAAM,KAAK,OAAO,MAAM;AAAA,IAC1B,SAAS,OAAP;AACA,cAAQ,IAAI,2CAAiC,OAAO;AAAA,IACtD;AAAA,EACF;AAAA;AAAA,EAEA,IAAI,QAA0B;AAC5B,WAAO,KAAK,GAAG,WAAW,uBAAI,SAAS,KAAK,WAAW,KAAe;AAAA,EACxE;AAAA;AAAA,EAGA,IAAI,gBAA0C;AAC5C,WAAO,KAAK,GAAG,WAAW,uBAAI,SAAS,KAAK,WAAW,cAAwB;AAAA,EACjF;AAAA,EAEA,IAAI,WAAgC;AAClC,WAAO,KAAK,GAAG,WAAW,uBAAI,SAAS,KAAK,WAAW,OAAiB;AAAA,EAC1E;AAAA,EAEA,IAAI,QAA0B;AAC5B,WAAO,KAAK,GAAG,WAAW,uBAAI,SAAS,KAAK,WAAW,IAAc;AAAA,EACvE;AAAA,EAEA,IAAI,QAA0B;AAC5B,WAAO,KAAK,GAAG,WAAW,uBAAI,SAAS,KAAK,WAAW,IAAc;AAAA,EACvE;AAAA,EACA,IAAI,SAA4B;AAC9B,WAAO,KAAK,GAAG,WAAW,uBAAI,SAAS,KAAK,WAAW,KAAe;AAAA,EACxE;AACF;AAEO,MAAM,kBAAkB,IAAI,iBAAiB;",
  "names": []
}
