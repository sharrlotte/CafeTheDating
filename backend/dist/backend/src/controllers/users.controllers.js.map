{
  "version": 3,
  "sources": ["../../../../src/controllers/users.controllers.ts"],
  "sourcesContent": ["import { Request, Response, NextFunction } from 'express'\r\nimport { ParamsDictionary } from 'express-serve-static-core'\r\nimport { RefreshTokenBody } from '@/models/requests/User.requests'\r\nimport userServices from '@/services/users.service'\r\nimport { ParsedUrlQuery } from 'querystring'\r\nimport { ObjectId } from 'mongodb'\r\nimport { StatusCodes } from 'http-status-codes'\r\n\r\nconst userController = {\r\n  refreshToken: async (req: Request<ParamsDictionary, any, RefreshTokenBody>, res: Response, next: NextFunction) => {\r\n    const result = await userServices.refreshToken(req.body)\r\n\r\n    return res.status(StatusCodes.OK).json(result)\r\n  },\r\n  getAllUser: async (req: Request<ParamsDictionary, any, any, ParsedUrlQuery>, res: Response, next: NextFunction) => {\r\n    const result = await userServices.getAllUser(req.query)\r\n\r\n    return res.status(StatusCodes.OK).json(result)\r\n  },\r\n  getUser: async (req: Request<ParamsDictionary, any, any>, res: Response, next: NextFunction) => {\r\n    const result = await userServices.getUserByID(new ObjectId(req.params.id))\r\n    return res.status(StatusCodes.OK).json(result)\r\n  },\r\n  getMe: async (req: Request<ParamsDictionary, any, any>, res: Response, next: NextFunction) => {\r\n    const result = await userServices.getUserByID(new ObjectId(req.user._id))\r\n    return res.status(StatusCodes.OK).json(result)\r\n  }\r\n}\r\n\r\nexport default userController\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,mBAAyB;AAEzB,qBAAyB;AACzB,+BAA4B;AAE5B,MAAM,iBAAiB;AAAA,EACrB,cAAc,OAAO,KAAuD,KAAe,SAAuB;AAChH,UAAM,SAAS,MAAM,aAAAA,QAAa,aAAa,IAAI,IAAI;AAEvD,WAAO,IAAI,OAAO,qCAAY,EAAE,EAAE,KAAK,MAAM;AAAA,EAC/C;AAAA,EACA,YAAY,OAAO,KAA0D,KAAe,SAAuB;AACjH,UAAM,SAAS,MAAM,aAAAA,QAAa,WAAW,IAAI,KAAK;AAEtD,WAAO,IAAI,OAAO,qCAAY,EAAE,EAAE,KAAK,MAAM;AAAA,EAC/C;AAAA,EACA,SAAS,OAAO,KAA0C,KAAe,SAAuB;AAC9F,UAAM,SAAS,MAAM,aAAAA,QAAa,YAAY,IAAI,wBAAS,IAAI,OAAO,EAAE,CAAC;AACzE,WAAO,IAAI,OAAO,qCAAY,EAAE,EAAE,KAAK,MAAM;AAAA,EAC/C;AAAA,EACA,OAAO,OAAO,KAA0C,KAAe,SAAuB;AAC5F,UAAM,SAAS,MAAM,aAAAA,QAAa,YAAY,IAAI,wBAAS,IAAI,KAAK,GAAG,CAAC;AACxE,WAAO,IAAI,OAAO,qCAAY,EAAE,EAAE,KAAK,MAAM;AAAA,EAC/C;AACF;AAEA,IAAO,4BAAQ;",
  "names": ["userServices"]
}
