{
  "version": 3,
  "sources": ["../../../../../src/routes/v1/users.routes.ts"],
  "sourcesContent": ["import { Router } from 'express'\r\nimport { UserRole } from '@/constants/enums'\r\nimport userController from '@/controllers/users.controllers'\r\nimport { requireLoginMiddleware, requireRoleMiddleware } from '@/middlewares/auth.middlewares'\r\nimport { paginationValidator } from '@/middlewares/commons.middleware'\r\nimport { getAllUserValidator, refreshTokenValidator } from '@/middlewares/users.middlewares'\r\nimport { wrapRequestHandler } from '@/utils/handler'\r\n\r\nconst userRouter = Router()\r\n\r\n/**\r\n * Description. Refresh Token\r\n * Path: /refresh-token\r\n * Method: POST\r\n * Body: { refresh_token: string }\r\n */\r\nuserRouter.post('/refresh-token', refreshTokenValidator, wrapRequestHandler(userController.refreshToken))\r\n\r\n/**\r\n * Description: Get all user by admin\r\n * Path: '/'\r\n * Method: GET\r\n * Header: { Authorization: Bearer <access_token> }\r\n * Params: { pageIndex: number, pageSize: number, query: string }\r\n */\r\n\r\nuserRouter.get('/', requireRoleMiddleware(UserRole.Admin), paginationValidator, getAllUserValidator, wrapRequestHandler(userController.getAllUser))\r\n\r\n/**\r\n * Description: Get my profile\r\n * Path: /@me/profile\r\n * Method: GET\r\n * Header: { Authorization: Bearer <access_token> }\r\n */\r\n\r\nuserRouter.get('/@me/profile', requireLoginMiddleware, wrapRequestHandler(userController.getMe))\r\n\r\nexport default userRouter\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAuB;AACvB,mBAAyB;AACzB,mBAA2B;AAC3B,kBAA8D;AAC9D,qBAAoC;AACpC,IAAAA,gBAA2D;AAC3D,qBAAmC;AAEnC,MAAM,iBAAa,uBAAO;AAQ1B,WAAW,KAAK,kBAAkB,yCAAuB,mCAAmB,aAAAC,QAAe,YAAY,CAAC;AAUxG,WAAW,IAAI,SAAK,mCAAsB,sBAAS,KAAK,GAAG,oCAAqB,uCAAqB,mCAAmB,aAAAA,QAAe,UAAU,CAAC;AASlJ,WAAW,IAAI,gBAAgB,wCAAwB,mCAAmB,aAAAA,QAAe,KAAK,CAAC;AAE/F,IAAO,uBAAQ;",
  "names": ["import_users", "userController"]
}
