{
  "version": 3,
  "sources": ["../../../../src/utils/jwt.ts"],
  "sourcesContent": ["import jwt from 'jsonwebtoken'\r\nimport { SignTokenType, VerifyTokenType } from '@/@types/tokenPayload.type'\r\nimport { ErrorWithStatus } from '@/models/errors/Errors.schema'\r\nimport { StatusCodes } from 'http-status-codes'\r\n\r\nexport const signToken = ({ payload, privateKey, options }: SignTokenType): Promise<string> => {\r\n  return new Promise<string>((resolve, reject) => {\r\n    jwt.sign(payload, privateKey, options, (err, token) => {\r\n      if (err) {\r\n        reject(new ErrorWithStatus({ message: err.message, statusCode: StatusCodes.UNAUTHORIZED }))\r\n      }\r\n      resolve(token as string)\r\n    })\r\n  })\r\n}\r\n\r\nexport const verifyToken = ({ token, secretOrPublicKey }: VerifyTokenType) => {\r\n  return new Promise<jwt.JwtPayload>((resolve, reject) => {\r\n    jwt.verify(token, secretOrPublicKey, function (err, decoded) {\r\n      if (err) {\r\n        reject(new ErrorWithStatus({ message: err.message, statusCode: StatusCodes.UNAUTHORIZED }))\r\n      }\r\n      resolve(decoded as jwt.JwtPayload)\r\n    })\r\n  })\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAgB;AAEhB,oBAAgC;AAChC,+BAA4B;AAErB,MAAM,YAAY,CAAC,EAAE,SAAS,YAAY,QAAQ,MAAsC;AAC7F,SAAO,IAAI,QAAgB,CAAC,SAAS,WAAW;AAC9C,wBAAAA,QAAI,KAAK,SAAS,YAAY,SAAS,CAAC,KAAK,UAAU;AACrD,UAAI,KAAK;AACP,eAAO,IAAI,8BAAgB,EAAE,SAAS,IAAI,SAAS,YAAY,qCAAY,aAAa,CAAC,CAAC;AAAA,MAC5F;AACA,cAAQ,KAAe;AAAA,IACzB,CAAC;AAAA,EACH,CAAC;AACH;AAEO,MAAM,cAAc,CAAC,EAAE,OAAO,kBAAkB,MAAuB;AAC5E,SAAO,IAAI,QAAwB,CAAC,SAAS,WAAW;AACtD,wBAAAA,QAAI,OAAO,OAAO,mBAAmB,SAAU,KAAK,SAAS;AAC3D,UAAI,KAAK;AACP,eAAO,IAAI,8BAAgB,EAAE,SAAS,IAAI,SAAS,YAAY,qCAAY,aAAa,CAAC,CAAC;AAAA,MAC5F;AACA,cAAQ,OAAyB;AAAA,IACnC,CAAC;AAAA,EACH,CAAC;AACH;",
  "names": ["jwt"]
}
