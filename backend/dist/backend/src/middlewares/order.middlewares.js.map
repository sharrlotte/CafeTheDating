{
  "version": 3,
  "sources": ["../../../../src/middlewares/order.middlewares.ts"],
  "sourcesContent": ["import { checkSchema } from 'express-validator'\r\nimport { StatusCodes } from 'http-status-codes'\r\nimport { ErrorWithStatus } from '@/models/errors/Errors.schema'\r\nimport { orderStates } from '@/models/schemas/Order.schema'\r\nimport validate from '@/utils/validate'\r\nimport { validateObjectId } from '@/middlewares/commons.middleware'\r\nimport { databaseService } from '@/services/database.service'\r\nimport { ObjectId } from 'mongodb'\r\n\r\nexport const getAllOrderValidator = validate(\r\n  checkSchema(\r\n    {\r\n      state: {\r\n        trim: true,\r\n        isString: {\r\n          errorMessage: 'Order type must be a string'\r\n        },\r\n        optional: true,\r\n        custom: {\r\n          options: (value) => {\r\n            if (![orderStates].includes(value)) {\r\n              throw new ErrorWithStatus({\r\n                message: 'Invalid order state',\r\n                statusCode: StatusCodes.BAD_REQUEST\r\n              })\r\n            }\r\n            return true\r\n          }\r\n        }\r\n      }\r\n    },\r\n    ['query']\r\n  )\r\n)\r\n\r\nexport const adminUpdateOrder = validate(\r\n  checkSchema(\r\n    {\r\n      state: {\r\n        trim: true,\r\n        isString: {\r\n          errorMessage: 'Order type must be a string'\r\n        },\r\n        custom: {\r\n          options: (value) => {\r\n            if (!orderStates.includes(value)) {\r\n              throw new ErrorWithStatus({\r\n                message: 'Invalid order state',\r\n                statusCode: StatusCodes.BAD_REQUEST\r\n              })\r\n            }\r\n            return true\r\n          }\r\n        }\r\n      },\r\n      id: {\r\n        trim: true,\r\n        isString: {\r\n          errorMessage: 'Order id must be a string'\r\n        },\r\n        optional: true,\r\n        custom: {\r\n          options: (value) => {\r\n            validateObjectId(value)\r\n            return true\r\n          }\r\n        }\r\n      }\r\n    },\r\n    ['params', 'body']\r\n  )\r\n)\r\n\r\nexport const createOrderValidator = validate(\r\n  checkSchema(\r\n    {\r\n      address: {\r\n        notEmpty: {\r\n          errorMessage: 'Address is required'\r\n        },\r\n        isString: { errorMessage: 'Address must be a string' }\r\n      },\r\n      orders: {\r\n        isArray: {\r\n          errorMessage: 'Orders must be an array',\r\n          options: {\r\n            min: 1\r\n          }\r\n        },\r\n        toArray: true\r\n      },\r\n      'orders.*.product_id': {\r\n        trim: true,\r\n        isString: true,\r\n        custom: {\r\n          options: async (value) => {\r\n            validateObjectId(value)\r\n\r\n            var product = await databaseService.products.findOne({ _id: new ObjectId(value) })\r\n\r\n            if (!product) {\r\n              throw new ErrorWithStatus({\r\n                message: 'Product not found for id: ' + value,\r\n                statusCode: StatusCodes.NOT_FOUND\r\n              })\r\n            }\r\n            return true\r\n          }\r\n        }\r\n      },\r\n      'orders.*.amount': {\r\n        isInt: {\r\n          options: {\r\n            min: 1\r\n          },\r\n          errorMessage: 'Invalid amount'\r\n        }\r\n      }\r\n    },\r\n    ['params', 'body']\r\n  )\r\n)\r\n\r\nexport const userCancelOrder = validate(\r\n  checkSchema(\r\n    {\r\n      id: {\r\n        trim: true,\r\n        isString: {\r\n          errorMessage: 'Sort must be a string'\r\n        },\r\n        optional: true,\r\n        custom: {\r\n          options: async (value, { req }) => {\r\n            validateObjectId(value)\r\n\r\n            const order = await databaseService.orders.findOne({ _id: value, user_id: new ObjectId(req.user._id) })\r\n\r\n            if (!order) {\r\n              throw new ErrorWithStatus({\r\n                message: 'Order is not exist or not belong to you',\r\n                statusCode: StatusCodes.BAD_REQUEST\r\n              })\r\n            }\r\n\r\n            return true\r\n          }\r\n        }\r\n      }\r\n    },\r\n    ['params', 'body']\r\n  )\r\n)\r\n"],
  "mappings": "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",
  "names": ["validate"]
}
