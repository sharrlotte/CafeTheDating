{
  "version": 3,
  "sources": ["../../../../src/services/cloudinary.service.ts"],
  "sourcesContent": ["import { UploadApiResponse, v2 as cloudinary } from 'cloudinary'\r\nimport { extractPublicId } from 'cloudinary-build-url'\r\nimport { env } from '@/config/environment.config'\r\nimport streamifier from 'streamifier'\r\nimport { ErrorWithStatus } from '@/models/errors/Errors.schema'\r\nimport _ from 'lodash'\r\n\r\ncloudinary.config({\r\n  api_secret: env.cloudinary.secret,\r\n  api_key: env.cloudinary.key,\r\n  cloud_name: env.cloudinary.cloud_name\r\n})\r\n\r\nclass CloudinaryService {\r\n  async uploadImage(folder: string, imageBuffer: Buffer) {\r\n    return await new Promise<UploadApiResponse>((resolve, reject) => {\r\n      const stream = cloudinary.uploader.upload_stream({ folder, format: 'jpg' }, (error, result) => {\r\n        if (result) {\r\n          return resolve(result)\r\n        }\r\n        return reject(\r\n          new ErrorWithStatus({\r\n            statusCode: error.http_code,\r\n            message: _.capitalize(error.message)\r\n          })\r\n        )\r\n      })\r\n      streamifier.createReadStream(imageBuffer).pipe(stream)\r\n    })\r\n  }\r\n\r\n  async deleteImage(url: string) {\r\n    return await new Promise((resolve, reject) => {\r\n      const publicId = extractPublicId(url)\r\n      cloudinary.api.delete_resources([publicId], (error, result) => {\r\n        if (result) {\r\n          return resolve(result)\r\n        }\r\n        return reject(error)\r\n      })\r\n    })\r\n  }\r\n}\r\nconst cloudinaryService = new CloudinaryService()\r\n\r\nexport default cloudinaryService\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAoD;AACpD,kCAAgC;AAChC,yBAAoB;AACpB,yBAAwB;AACxB,oBAAgC;AAChC,oBAAc;AAEd,kBAAAA,GAAW,OAAO;AAAA,EAChB,YAAY,uBAAI,WAAW;AAAA,EAC3B,SAAS,uBAAI,WAAW;AAAA,EACxB,YAAY,uBAAI,WAAW;AAC7B,CAAC;AAED,MAAM,kBAAkB;AAAA,EACtB,MAAM,YAAY,QAAgB,aAAqB;AACrD,WAAO,MAAM,IAAI,QAA2B,CAAC,SAAS,WAAW;AAC/D,YAAM,SAAS,kBAAAA,GAAW,SAAS,cAAc,EAAE,QAAQ,QAAQ,MAAM,GAAG,CAAC,OAAO,WAAW;AAC7F,YAAI,QAAQ;AACV,iBAAO,QAAQ,MAAM;AAAA,QACvB;AACA,eAAO;AAAA,UACL,IAAI,8BAAgB;AAAA,YAClB,YAAY,MAAM;AAAA,YAClB,SAAS,cAAAC,QAAE,WAAW,MAAM,OAAO;AAAA,UACrC,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AACD,yBAAAC,QAAY,iBAAiB,WAAW,EAAE,KAAK,MAAM;AAAA,IACvD,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,YAAY,KAAa;AAC7B,WAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC5C,YAAM,eAAW,6CAAgB,GAAG;AACpC,wBAAAF,GAAW,IAAI,iBAAiB,CAAC,QAAQ,GAAG,CAAC,OAAO,WAAW;AAC7D,YAAI,QAAQ;AACV,iBAAO,QAAQ,MAAM;AAAA,QACvB;AACA,eAAO,OAAO,KAAK;AAAA,MACrB,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;AACA,MAAM,oBAAoB,IAAI,kBAAkB;AAEhD,IAAO,6BAAQ;",
  "names": ["cloudinary", "_", "streamifier"]
}
