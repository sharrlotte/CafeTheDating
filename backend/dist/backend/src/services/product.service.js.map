{
  "version": 3,
  "sources": ["../../../../src/services/product.service.ts"],
  "sourcesContent": ["import { StatusCodes } from 'http-status-codes'\r\nimport { ObjectId } from 'mongodb'\r\nimport { ParsedUrlQuery } from 'querystring'\r\nimport { AuthUser } from '@/@types/auth.type'\r\nimport { CreateProductBody, UpdateProductBody } from '@/@types/request.type'\r\nimport { ErrorWithStatus } from '@/models/errors/Errors.schema'\r\nimport Like from '@/models/schemas/Like.shema'\r\nimport Product, { ProductSort } from '@/models/schemas/Product.schema'\r\nimport ProductType from '@/models/schemas/ProductType.schema'\r\nimport cloudinaryService from '@/services/cloudinary.service'\r\nimport { databaseService } from '@/services/database.service'\r\n\r\nclass ProductService {\r\n  async like(user: AuthUser, id: string): Promise<void> {\r\n    try {\r\n      if (!ObjectId.isValid(id)) {\r\n        throw new ErrorWithStatus({\r\n          statusCode: StatusCodes.BAD_REQUEST,\r\n          message: 'Product id is invalid'\r\n        })\r\n      }\r\n      let { _id } = user\r\n\r\n      const likeExists = await databaseService.likes.findOne({\r\n        user_id: new ObjectId(_id),\r\n        prod_id: new ObjectId(id)\r\n      })\r\n\r\n      if (!likeExists) {\r\n        await databaseService.likes.insertOne(\r\n          new Like({\r\n            user_id: new ObjectId(_id),\r\n            prod_id: new ObjectId(id)\r\n          })\r\n        )\r\n      }\r\n    } catch (error) {\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async unlike(user: AuthUser, id: string): Promise<void> {\r\n    try {\r\n      if (!ObjectId.isValid(id)) {\r\n        throw new ErrorWithStatus({\r\n          statusCode: StatusCodes.BAD_REQUEST,\r\n          message: 'Invalid product id'\r\n        })\r\n      }\r\n      let { _id } = user\r\n      await databaseService.likes.deleteOne({\r\n        user_id: new ObjectId(_id),\r\n        prod_id: new ObjectId(id)\r\n      })\r\n    } catch (error) {\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async getAllProduct(query: ParsedUrlQuery) {\r\n    const product_type: ProductType = query.type as ProductType\r\n    const sort = query.sort as ProductSort\r\n\r\n    const q = product_type ? { product_type: product_type } : {}\r\n\r\n    switch (sort) {\r\n      case 'discount':\r\n        return await databaseService.products\r\n          .find({\r\n            ...q,\r\n            deleted: false,\r\n            discount: {\r\n              $gt: 0\r\n            }\r\n          })\r\n          .sort({ discount: 'desc', _id: 'desc' })\r\n          .toArray()\r\n\r\n      case 'best-choice':\r\n        return await databaseService.products\r\n          .find({\r\n            ...q,\r\n            deleted: false,\r\n            tags: {\r\n              $in: ['best-choice']\r\n            }\r\n          })\r\n          .sort({ _id: 'desc' })\r\n          .toArray()\r\n\r\n      case 'new':\r\n        return await databaseService.products\r\n          .find({\r\n            ...q,\r\n            deleted: false,\r\n            tags: {\r\n              $in: ['new']\r\n            }\r\n          })\r\n          .sort({ _id: 'desc' })\r\n          .toArray()\r\n\r\n      default:\r\n        return await databaseService.products\r\n          .find({\r\n            ...q,\r\n            deleted: false\r\n          })\r\n          .sort({ _id: 'desc' })\r\n          .toArray()\r\n    }\r\n  }\r\n\r\n  async createProduct(payload: CreateProductBody, file: Express.Multer.File) {\r\n    const { url } = await cloudinaryService.uploadImage('product', file.buffer)\r\n\r\n    await databaseService.products.insertOne(new Product({ ...payload, image: url }))\r\n  }\r\n  async updateProduct(id: string, payload: UpdateProductBody) {\r\n    const result = await databaseService.products.findOneAndUpdate(\r\n      { _id: new ObjectId(id) },\r\n      {\r\n        $set: payload\r\n      },\r\n      {\r\n        upsert: false\r\n      }\r\n    )\r\n    cloudinaryService.deleteImage(result.image)\r\n  }\r\n\r\n  async deleteProduct(id: string) {\r\n    await databaseService.products.updateOne(\r\n      { _id: new ObjectId(id) },\r\n      {\r\n        $set: {\r\n          deleted: true\r\n        }\r\n      },\r\n      { upsert: false }\r\n    )\r\n  }\r\n}\r\n\r\nconst productService = new ProductService()\r\nexport default productService\r\n"],
  "mappings": "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",
  "names": ["Like", "cloudinaryService", "Product"]
}
